import ccxt
import pandas as pd
import time
import requests
from config import BINANCE_API_KEY, BINANCE_API_SECRET, symbols, time_interval

# Create a Binance Futures client
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future',  # Set the default type to futures
    }
})

# Define EMA strategy parameters
short_ema_period = 7
long_ema_period = 50

# Track the last order type placed for each symbol
last_order_types = {symbol: None for symbol in symbols}
open_orders = {symbol: None for symbol in symbols}

# Fixed quantity in USDT worth of contracts
fixed_quantity_usdt = 11

# Function to fetch historical data for futures with EMA calculation
def fetch_ohlcv(symbol, timeframe, limit):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

    # Calculate short and long EMAs
    df['short_ema'] = calculate_ema(df, short_ema_period)
    df['long_ema'] = calculate_ema(df, long_ema_period)

    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate EMA
def calculate_ema(df, period, column='close'):
    return df[column].ewm(span=period, adjust=False).mean()

# Function to send webhook signal with a message
def send_webhook_signal(symbol, signal_type, message):
    webhook_url = "https://nextlevelbot.com/telegram/webhook/NWxZVmdwSkxSeVZhZ0lReklCNGE1aVpnMlFiYkw5TUV5TkRBSHo4aFdPTGFEcVRiSnVNekdkSm5ESUJ3M0JMZWlTc3JyN3EzTlFSemU2eE1yTTc2Q1RxVDZmYUEwVHc1aVV3UEN1d1dmMmZINEFid0F5d1pvU2tpdnVCaFlpdm8="
    payload = {
        "symbol": symbol,
        "signal_type": signal_type,
        "message": message
    }
    try:
        response = requests.post(webhook_url, json=payload)
        if response.status_code == 200:
            print(f"Webhook signal sent for {symbol}: {signal_type}")
        else:
            print(f"Failed to send webhook signal for {symbol}: {response.text}")
    except Exception as e:
        print(f"Error sending webhook signal for {symbol}: {e}")

# Main trading function for futures
def ema_strategy():
    while True:
        try:
            for symbol in symbols:
                # Fetch historical data for each symbol
                historical_data = fetch_ohlcv(symbol, time_interval, 200)

                # Check if there's enough data for EMA calculation
                if len(historical_data) < long_ema_period:
                    print(f"Not enough data for {symbol}. Waiting for more data...")
                    continue

                # Determine the latest EMA crossover or crossunder signal
                if (
                    historical_data['short_ema'].iloc[-2] >= historical_data['long_ema'].iloc[-2] and
                    historical_data['short_ema'].iloc[-3] <= historical_data['long_ema'].iloc[-3] and
                    last_order_types[symbol] != 'BUY'
                ):
                    print(f'{symbol} Buy Signal (Crossover)')
                    send_webhook_signal(symbol, "BUY", "EMA crossover detected - time to buy!")
                    last_order_types[symbol] = 'BUY'

                elif (
                    historical_data['long_ema'].iloc[-2] >= historical_data['short_ema'].iloc[-2] and
                    historical_data['long_ema'].iloc[-3] <= historical_data['short_ema'].iloc[-3] and
                    last_order_types[symbol] != 'SELL'
                ):
                    print(f'{symbol} Sell Signal (Crossunder)')
                    send_webhook_signal(symbol, "SELL", "EMA crossunder detected - time to sell!")
                    last_order_types[symbol] = 'SELL'

            # Sleep for some time (e.g., 5 minutes) before checking again
            time.sleep(60)

        except Exception as e:
            print(f'An error occurred: {e}')
            time.sleep(60)  # Wait for a minute before trying again

# Run the trading strategy
ema_strategy()
