import ccxt
import pandas as pd
import time
import ta

# Add your Binance API key, secret, symbols, and time_interval
BINANCE_API_KEY = 'veiqd07BuRmMlxy3eeRLLKNyDnFrIphTcqgSM7XTRUCzQWTyqxK4sPtfVZioaVHi'
BINANCE_API_SECRET = 'N4myBDNkkD203gxxpo8NLQgdZxdvzm7N7PpBjBU0DiTtctTLaFQEVev51N4P5R5g'
symbols = [
    'WLDUSDT', 'SEIUSDT', 'CYBERUSDT', 'ARKUSDT','NTRNUSDT', 'TIAUSDT', 'MEMEUSDT',
    'ORDIUSDT', 'BEAMXUSDT', 'BLURUSDT', 'JTOUSDT', '1000SATSUSDT',
    'ACEUSDT', 'NFPUSDT', 'AIUSDT', 'XAIUSDT', 'MANTAUSDT', 'POWRUSDT',
    'JASMYUSDT', 'RNDRUSDT',
    'BICOUSDT', 'FXSUSDT', 'HIGHUSDT', 'CVXUSDT', 'PEOPLEUSDT', 'SPELLUSDT',
    'JOEUSDT', 'ACHUSDT', 'IMXUSDT', 'GLMRUSDT', 'API3USDT',
    'WOOUSDT', 'ASTRUSDT', 'GMTUSDT', 'APEUSDT',
    'STEEMUSDT', 'GALUSDT', 'LDOUSDT', 'BTCUSDT', 'ETHUSDT',
    'BNBUSDT', 'NEOUSDT', 'LTCUSDT', 'QTUMUSDT', 'ADAUSDT', 'XRPUSDT', 'EOSUSDT', 'IOTAUSDT', 'XLMUSDT',
    'ONTUSDT', 'TRXUSDT', 'ETCUSDT', 'ICXUSDT', 'VETUSDT',
    'LINKUSDT', 'WAVESUSDT', 'ONGUSDT', 'HOTUSDT', 'ZILUSDT', 'ZRXUSDT', 'FETUSDT', 'BATUSDT',
    'XMRUSDT', 'ZECUSDT', 'IOSTUSDT', 'CELRUSDT', 'DASHUSDT', 'OMGUSDT', 'THETAUSDT', 'ENJUSDT',
    'MATICUSDT', 'ATOMUSDT', 'ONEUSDT', 'FTMUSDT', 'ALGOUSDT', 'DOGEUSDT',
    'DUSKUSDT', 'ANKRUSDT', 'MTLUSDT', 'DENTUSDT',
    'KEYUSDT', 'STMXUSDT', 'CHZUSDT', 'BANDUSDT',
    'XTZUSDT', 'RENUSDT', 'RVNUSDT', 'HBARUSDT', 'NKNUSDT', 'STXUSDT', 'KAVAUSDT', 'ARPAUSDT', 'IOTXUSDT',
    'RLCUSDT', 'BCHUSDT', 'OGNUSDT',
    'LSKUSDT', 'BNTUSDT', 'MBLUSDT',
    'COTIUSDT', 'STPTUSDT', 'SOLUSDT', 'CTSIUSDT', 'CHRUSDT',
    'MDTUSDT', 'KNCUSDT', 'LRCUSDT', 'COMPUSDT',
    'ZENUSDT', 'SNXUSDT', 'DGBUSDT', 'SXPUSDT', 'MKRUSDT',
    'STORJUSDT', 'MANAUSDT', 'YFIUSDT', 'BALUSDT', 'BLZUSDT',
    'ANTUSDT', 'CRVUSDT', 'SANDUSDT', 'OCEANUSDT', 'NMRUSDT', 'DOTUSDT', 'RSRUSDT',
    'TRBUSDT', 'SUSHIUSDT', 'KSMUSDT', 'EGLDUSDT', 'RUNEUSDT', 'UMAUSDT',
    'BELUSDT', 'UNIUSDT', 'OXTUSDT', 'AVAXUSDT', 'FLMUSDT',
    'XVSUSDT', 'ALPHAUSDT', 'AAVEUSDT', 'NEARUSDT', 'FILUSDT', 'INJUSDT', 'AUDIOUSDT', 'CTKUSDT',
    'AXSUSDT', 'STRAXUSDT', 'UNFIUSDT', 'ROSEUSDT', 'XEMUSDT', 'SKLUSDT',
    'GRTUSDT', '1INCHUSDT', 'REEFUSDT', 'CELOUSDT', 'RIFUSDT',
    'TRUUSDT', 'CKBUSDT', 'TWTUSDT', 'LITUSDT', 'SFPUSDT', 'CAKEUSDT',
    'BADGERUSDT', 'ALICEUSDT', 'LINAUSDT', 'PERPUSDT', 'SUPERUSDT',
    'CFXUSDT', 'TLMUSDT',
    'BAKEUSDT', 'SLPUSDT', 'ICPUSDT', 'ARUSDT', 'MASKUSDT', 'LPTUSDT',
    'XVGUSDT', 'ATAUSDT', 'APTUSDT', 'ARBUSDT', 'DYMUSDT', 'RONINUSDT', 'JUPUSDT', 'ALTUSDT' 
]  # Example: ['BTC/USDT', 'ETH/USDT']
time_interval = '15m'  # Example: '1h'

# Create a Binance Futures client
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future',  # Set the default type to futures
    }
})

# Define EMA strategy parameters
short_ema_period = 7
medium_ema_period = 44
long_ema_period = 50

# Track the last order type placed for each symbol
last_order_types = {symbol: None for symbol in symbols}
open_positions = {symbol: None for symbol in symbols}

# Fixed quantity in USDT worth of contracts
fixed_quantity_usdt = 11

# Function to fetch historical data for futures with EMA and StochRSI calculation
def fetch_ohlcv(symbol, timeframe, limit):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

    df['short_ema'] = calculate_ema(df, short_ema_period)
    df['medium_ema'] = calculate_ema(df, medium_ema_period)
    df['long_ema'] = calculate_ema(df, long_ema_period)

    # Calculate StochRSI
    stoch_rsi_indicator = ta.momentum.StochRSIIndicator(df['close'])
    df['stoch_rsi'] = stoch_rsi_indicator.stochrsi()
    df['stoch_rsi_k'] = stoch_rsi_indicator.stochrsi_k()
    df['stoch_rsi_d'] = stoch_rsi_indicator.stochrsi_d()

    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate EMA
def calculate_ema(df, period, column='close'):
    return df[column].ewm(span=period, adjust=False).mean()

# Function to place a market buy order
def place_market_buy_order(symbol, quantity):
    try:
        order = exchange.create_market_buy_order(
            symbol=symbol,
            amount=quantity
        )
        print(f"Market Buy Order placed for {symbol}: {order}")
        return order
    except Exception as e:
        print(f"Error placing Market Buy Order for {symbol}: {e}")

# Function to place a market sell order
def place_market_sell_order(symbol, quantity):
    try:
        order = exchange.create_market_sell_order(
            symbol=symbol,
            amount=quantity
        )
        print(f"Market Sell Order placed for {symbol}: {order}")
        return order
    except Exception as e:
        print(f"Error placing Market Sell Order for {symbol}: {e}")

# Function to close long position
def close_long_position(symbol, quantity):
    try:
        order = exchange.create_market_sell_order(
            symbol=symbol,
            amount=quantity
        )
        print(f"Closed Long Position for {symbol}: {order}")
        open_positions[symbol] = None
        return order
    except Exception as e:
        print(f"Error closing Long Position for {symbol}: {e}")

# Function to close short position
def close_short_position(symbol, quantity):
    try:
        order = exchange.create_market_buy_order(
            symbol=symbol,
            amount=quantity
        )
        print(f"Closed Short Position for {symbol}: {order}")
        open_positions[symbol] = None
        return order
    except Exception as e:
        print(f"Error closing Short Position for {symbol}: {e}")

# Main trading function for futures
def ema_strategy():
    while True:
        try:
            for symbol in symbols:
                # Fetch historical data for each symbol
                historical_data = fetch_ohlcv(symbol, time_interval, 200)

                # Check if there's enough data for EMA calculation
                if len(historical_data) < long_ema_period:
                    print(f"Not enough data for {symbol}. Waiting for more data...")
                    continue

                # Calculate EMA values
                short_ema_values = historical_data['short_ema']
                medium_ema_values = historical_data['medium_ema']
                long_ema_values = historical_data['long_ema']

                # Print EMA values
                #print(f'{symbol} EMA Values:')
                #print('Short EMA 2:', short_ema_values.iloc[-2])
                #print('Short EMA 3:', short_ema_values.iloc[-3])
                #print('Long EMA:', long_ema_values.iloc[-1])

                # Fetch the latest candlestick for each symbol
                latest_candle = exchange.fetch_ticker(symbol)

                if 'close' not in latest_candle:
                    print(f"Error: 'close' not found in the latest_candle for {symbol}")
                    continue

                latest_close = latest_candle.get('close')

                # Check if latest_close is None or not a valid number
                if latest_close is None or not isinstance(latest_close, (int, float)):
                    print(f"Error: Invalid value for latest_close for {symbol}")
                    continue

                # Calculate the quantity based on the fixed USDT value
                quantity = fixed_quantity_usdt / float(latest_close)

                # Make trading decisions for each symbol
                if (
                    last_order_types[symbol] != 'LONG' and
                    (
                        (
                            (historical_data['stoch_rsi_k'].iloc[-2] > historical_data['stoch_rsi_d'].iloc[-2] and
                            historical_data['stoch_rsi_k'].iloc[-3] < historical_data['stoch_rsi_d'].iloc[-3]) or
                            (historical_data['stoch_rsi_k'].iloc[-3] > historical_data['stoch_rsi_d'].iloc[-3] and
                            historical_data['stoch_rsi_k'].iloc[-4] < historical_data['stoch_rsi_d'].iloc[-4])
                        ) and
                        historical_data['stoch_rsi_k'].iloc[-2] < 0.3 and
                        short_ema_values.iloc[-2] > short_ema_values.iloc[-3]
                    )
                    and historical_data['short_ema'].iloc[-2] > historical_data['medium_ema'].iloc[-2]
                    and historical_data['medium_ema'].iloc[-2] > historical_data['long_ema'].iloc[-2]
                ):
                    print(f'{symbol} Long Entry Signal')
                    # Close existing short position if any
                    if open_positions[symbol] == 'SHORT':
                        close_short_position(symbol, quantity)
                    # Place a market buy order to enter long position
                    place_market_buy_order(symbol, quantity)
                    open_positions[symbol] = 'LONG'
                    last_order_types[symbol] = 'LONG'

                elif (
                    last_order_types[symbol] == 'LONG' and
                    (
                        historical_data['stoch_rsi_k'].iloc[-2] < historical_data['stoch_rsi_k'].iloc[-3]
                        or short_ema_values.iloc[-2] < short_ema_values.iloc[-3]
                    )
                ):
                    print(f'{symbol} Long Exit Signal')
                    # Close existing long position if short EMA crosses below long EMA
                    close_long_position(symbol, quantity)

                elif (
                    last_order_types[symbol] != 'SHORT' and
                    (
                        (
                            (historical_data['stoch_rsi_k'].iloc[-2] < historical_data['stoch_rsi_d'].iloc[-2] and
                            historical_data['stoch_rsi_k'].iloc[-3] > historical_data['stoch_rsi_d'].iloc[-3]) or
                            (historical_data['stoch_rsi_k'].iloc[-3] < historical_data['stoch_rsi_d'].iloc[-3] and
                            historical_data['stoch_rsi_k'].iloc[-4] > historical_data['stoch_rsi_d'].iloc[-4])
                        ) and
                        historical_data['stoch_rsi_k'].iloc[-2] > 0.7 and
                        historical_data['short_ema'].iloc[-2] < historical_data['short_ema'].iloc[-3]
                    )
                    and short_ema_values.iloc[-2] < short_ema_values.iloc[-3]
                    and historical_data['medium_ema'].iloc[-2] < historical_data['long_ema'].iloc[-2]
                ):
                    print(f'{symbol} Short Entry Signal')
                    # Close existing long position if any
                    if open_positions[symbol] == 'LONG':
                        close_long_position(symbol, quantity)
                    # Place a market sell order to enter short position
                    place_market_sell_order(symbol, quantity)
                    open_positions[symbol] = 'SHORT'
                    last_order_types[symbol] = 'SHORT'

                elif (
                    last_order_types[symbol] == 'SHORT' and
                    (
                        historical_data['stoch_rsi_k'].iloc[-2] > historical_data['stoch_rsi_k'].iloc[-3]
                        or historical_data['short_ema'].iloc[-2] > historical_data['short_ema'].iloc[-3]
                    )
                ):
                    print(f'{symbol} Short Exit Signal')
                    # Close existing short position if short EMA crosses above long EMA
                    close_short_position(symbol, quantity)

            # Sleep for some time (e.g., 5 minutes) before checking again
            time.sleep(60)

        except Exception as e:
            print(f'An error occurred: {e}')
            time.sleep(60)  # Wait for a minute before trying again

# Run the trading strategy
ema_strategy()
