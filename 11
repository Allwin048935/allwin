import pandas as pd
from binance.client import Client
from ta.momentum import StochRSIIndicator
from datetime import datetime

# Binance API credentials
api_key = 'veiqd07BuRmMlxy3eeRLLKNyDnFrIphTcqgSM7XTRUCzQWTyqxK4sPtfVZioaVHi'
api_secret = 'N4myBDNkkD203gxxpo8NLQgdZxdvzm7N7PpBjBU0DiTtctTLaFQEVev51N4P5R5g'

# Initialize Binance client
client = Client(api_key, api_secret)

# Symbol and time interval
symbol = 'COTUSDT'  # Future contract symbol
interval = Client.KLINE_INTERVAL_1HOUR

# Number of candles to retrieve
limit = 100

# Fetch historical data
klines = client.futures_klines(symbol=symbol, interval=interval, limit=limit)

# Extracting closing prices and timestamps
closing_prices = [float(kline[4]) for kline in klines]
timestamps = [datetime.utcfromtimestamp(kline[0] / 1000) for kline in klines]

# Create a DataFrame
data = pd.DataFrame({'timestamp': timestamps, 'close': closing_prices})

# Calculate StochRSI
indicator = StochRSIIndicator(close=data['close'], window=14, smooth1=3, smooth2=3)
data['stochrsi'] = indicator.stochrsi()
data['stochrsi_k'] = indicator.stochrsi_k()
data['stochrsi_d'] = indicator.stochrsi_d()

# Define a function to generate buy and sell signals
def generate_signals(data):
    signals = pd.DataFrame(index=data.index)
    signals['price'] = data['close']
    signals['stoch_rsi'] = data['stochrsi']
    signals['stoch_rsi_k'] = data['stochrsi_k']
    signals['stoch_rsi_d'] = data['stochrsi_d']
    
    # Generate buy signals
    signals['buy_signal'] = 0
    signals.loc[(signals['stoch_rsi_k'] > signals['stoch_rsi_d']) & (signals['stoch_rsi_k'].shift(1) <= signals['stoch_rsi_d'].shift(1)), 'buy_signal'] = 1
    
    # Generate sell signals
    signals['sell_signal'] = 0
    signals.loc[(signals['stoch_rsi_k'] < signals['stoch_rsi_d']) & (signals['stoch_rsi_k'].shift(1) >= signals['stoch_rsi_d'].shift(1)), 'sell_signal'] = -1
    
    return signals

# Generate signals
signals = generate_signals(data)

# Get current price of the cryptocurrency
current_price = float(client.futures_symbol_ticker(symbol=symbol)['price'])

# Calculate the equivalent quantity of COTI for $100 USDT
quantity_usdt = 100
equivalent_quantity_coti = quantity_usdt / current_price

# Implement a basic trading strategy
position = 0  # 0 for no position, 1 for long, -1 for short
for index, row in signals.iterrows():
    if row['buy_signal'] == 1 and position != 1:
        # Place buy order
        order = client.futures_create_order(
            symbol=symbol,
            side=Client.SIDE_BUY,
            type=Client.ORDER_TYPE_MARKET,
            quantity=equivalent_quantity_coti,
        )
        position = 1
        print("Buy Signal at:", row['price'])
    elif row['sell_signal'] == -1 and position != -1:
        # Place sell order
        order = client.futures_create_order(
            symbol=symbol,
            side=Client.SIDE_SELL,
            type=Client.ORDER_TYPE_MARKET,
            quantity=equivalent_quantity_coti,
        )
        position = -1
        print("Sell Signal at:", row['price'])

# Ensure to close any open positions at the end of your trading period
# Your code to close any open positions goes here