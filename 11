
from binance.client import Client
from binance.websockets import BinanceSocketManager
import pandas as pd
import numpy as np

# Initialize Binance client
api_key = 'veiqd07BuRmMlxy3eeRLLKNyDnFrIphTcqgSM7XTRUCzQWTyqxK4sPtfVZioaVHi'
api_secret = 'N4myBDNkkD203gxxpo8NLQgdZxdvzm7N7PpBjBU0DiTtctTLaFQEVev51N4P5R5g'
client = Client(api_key, api_secret)

# Initialize Binance socket manager
bm = BinanceSocketManager(client)

# Initialize DataFrame to store historical data
historical_data = pd.DataFrame(columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

# Function to calculate StochRSI
def calculate_stochrsi(data, window):
    if len(data) < window:
        return np.nan, np.nan

    delta = data['close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)

    rsi_gain = gain.rolling(window=window, min_periods=1).mean()
    rsi_loss = loss.rolling(window=window, min_periods=1).mean()

    rsi = rsi_gain / (rsi_gain + rsi_loss)
    stoch_rsi_k = (rsi - rsi.rolling(window=window, min_periods=1).min()) / (rsi.rolling(window=window, min_periods=1).max() - rsi.rolling(window=window, min_periods=1).min())
    stoch_rsi_d = stoch_rsi_k.rolling(window=3).mean()  # Smoothing with a 3-period simple moving average for %D
    
    return stoch_rsi_k.iloc[-1], stoch_rsi_d.iloc[-1]

# Define callback function for handling Kline data
def process_message(msg):
    # Extract relevant data from the message
    kline = msg['k']
    candlestick = {
        'timestamp': pd.to_datetime(kline['t'], unit='ms'),
        'open': float(kline['o']),
        'high': float(kline['h']),
        'low': float(kline['l']),
        'close': float(kline['c']),
        'volume': float(kline['v'])
    }

    # Add received data to historical data DataFrame
    global historical_data
    historical_data = historical_data.append(candlestick, ignore_index=True)

    # Calculate StochRSI if enough historical data is available
    stoch_rsi_k, stoch_rsi_d = calculate_stochrsi(historical_data, 14)
    
    print("Received:", candlestick)
    print("StochRSI %K:", stoch_rsi_k)
    print("StochRSI %D:", stoch_rsi_d)

    # Process the candlestick data further, e.g., execute trades based on StochRSI

# Subscribe to the WebSocket stream for Kline data
symbol = 'btcusdt'
interval = '15m'
socket = f"{symbol}@kline_{interval}"
conn_key = bm.start_kline_socket(symbol, process_message, interval=interval)

# Start the WebSocket
bm.start()

# Keep the program running
bm.join()