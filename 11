
from binance.client import Client
from binance.websockets import BinanceSocketManager
import pandas as pd
import numpy as np

# Initialize Binance client
api_key = 'veiqd07BuRmMlxy3eeRLLKNyDnFrIphTcqgSM7XTRUCzQWTyqxK4sPtfVZioaVHi'
api_secret = 'N4myBDNkkD203gxxpo8NLQgdZxdvzm7N7PpBjBU0DiTtctTLaFQEVev51N4P5R5g'
client = Client(api_key, api_secret)

# Initialize Binance socket manager
bm = BinanceSocketManager(client)

# Function to calculate StochRSI
def calculate_stochrsi(data, window):
    if len(data) < window:
        return np.nan, np.nan

    close = data['close'].values
    rsi = calculate_rsi(close, window)
    stoch_rsi_k = (rsi - np.min(rsi)) / (np.max(rsi) - np.min(rsi))
    stoch_rsi_d = np.mean(stoch_rsi_k[-3:])  # Smoothing with a 3-period simple moving average for %D

    return stoch_rsi_k[-1], stoch_rsi_d

# Function to calculate RSI
def calculate_rsi(close, window):
    delta = np.diff(close)
    gain = delta * 0
    loss = delta * 0

    gain[delta > 0] = delta[delta > 0]
    loss[delta < 0] = -delta[delta < 0]

    avg_gain = np.zeros_like(close)
    avg_loss = np.zeros_like(close)

    avg_gain[window] = np.mean(gain[:window])
    avg_loss[window] = np.mean(loss[:window])

    for i in range(window + 1, len(close)):
        avg_gain[i] = (avg_gain[i - 1] * (window - 1) + gain[i]) / window
        avg_loss[i] = (avg_loss[i - 1] * (window - 1) + loss[i]) / window

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))

    return rsi

# Define callback function for handling Kline data
def process_message(msg):
    # Extract relevant data from the message
    kline = msg['k']
    candlestick = {
        'timestamp': pd.to_datetime(kline['t'], unit='ms'),
        'open': float(kline['o']),
        'high': float(kline['h']),
        'low': float(kline['l']),
        'close': float(kline['c']),
        'volume': float(kline['v'])
    }

    # Add received data to historical data DataFrame
    global historical_data
    historical_data = historical_data.append(candlestick, ignore_index=True)

    # Calculate StochRSI if enough historical data is available
    stoch_rsi_k, stoch_rsi_d = calculate_stochrsi(historical_data, 14)
    
    print("Received:", candlestick)
    print("StochRSI %K:", stoch_rsi_k)
    print("StochRSI %D:", stoch_rsi_d)

    # Process the candlestick data further, e.g., execute trades based on StochRSI

# Subscribe to the WebSocket stream for Kline data
symbol = 'btcusdt'
interval = '15m'
socket = f"{symbol}@kline_{interval}"
conn_key = bm.start_kline_socket(symbol, process_message, interval=interval)

# Start the WebSocket
bm.start()

# Keep the program running
bm.join()