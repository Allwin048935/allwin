import requests
import json
import time
import hashlib
import hmac
import urllib.parse

# Binance API keys
api_key = 'cOmCONWJRpxWr9XGwwJoKPLQSWeWIwMjoobgqXKG6cqO6GmtIaXdsMEjsHXJcNQU'
api_secret = 'AC4x9ihiOezuEtqz0lRcO5QOHgGQUwFZ3TOyJw38SXmsePIM1KmNWeVYw0H4nXO2'

# Function to create signature for request
def generate_signature(data):
    return hmac.new(api_secret.encode('utf-8'), data.encode('utf-8'), hashlib.sha256).hexdigest()

# Function to get future account balance
def get_future_balance(api_key, api_secret):
    try:
        # Construct request URL
        base_url = 'https://fapi.binance.com'
        endpoint = '/fapi/v2/account'
        url = base_url + endpoint
        
        # Add API key, timestamp, and signature to request headers
        timestamp = int(time.time() * 1000)
        query_string = urllib.parse.urlencode({'timestamp': timestamp})
        signature = generate_signature(query_string)
        headers = {
            'X-MBX-APIKEY': api_key,
        }
        
        # Send request
        response = requests.get(url, headers=headers, params={'timestamp': timestamp, 'signature': signature})
        data = response.json()
        
        # Parse response
        if 'assets' in data:
            assets = data['assets']
            for asset in assets:
                asset_name = asset['asset']
                balance = float(asset['walletBalance'])
                print(f"{asset_name}: {balance}")
        else:
            print("Failed to fetch future account balances:", data)
    except Exception as e:
        print("An error occurred:", e)

# Main function to run the bot
def main():
    while True:
        # Get future account balance
        print("Current Future Balances:")
        get_future_balance(api_key, api_secret)
        
        # Wait for 5 seconds before fetching balances again
        time.sleep(5)

if __name__ == "__main__":
    main()
