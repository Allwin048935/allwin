import pandas as pd
from binance.client import Client
from ta.momentum import StochRSIIndicator
from datetime import datetime

# Binance API credentials
api_key = 'veiqd07BuRmMlxy3eeRLLKNyDnFrIphTcqgSM7XTRUCzQWTyqxK4sPtfVZioaVHi'
api_secret = 'N4myBDNkkD203gxxpo8NLQgdZxdvzm7N7PpBjBU0DiTtctTLaFQEVev51N4P5R5g'

# Initialize Binance client
client = Client(api_key, api_secret)

# Symbol and time interval
symbol = 'COTIUSDT'
interval = Client.KLINE_INTERVAL_1HOUR

# Number of candles to retrieve
limit = 100

# Fetch historical data
klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)

# Extracting closing prices and timestamps
closing_prices = [float(kline[4]) for kline in klines]
timestamps = [datetime.utcfromtimestamp(kline[0] / 1000) for kline in klines]

# Create a DataFrame
data = pd.DataFrame({'timestamp': timestamps, 'close': closing_prices})

# Calculate StochRSI
indicator = StochRSIIndicator(close=data['close'], window=14, smooth1=3, smooth2=3)
data['stochrsi'] = indicator.stochrsi()
data['stochrsi_k'] = indicator.stochrsi_k()
data['stochrsi_d'] = indicator.stochrsi_d()

# Simple trading strategy based on StochRSI
def implement_strategy(df):
    position = 0  # 0 for no position, 1 for long, -1 for short
    signals = []
    for i in range(1, len(df)):
        if df['stochrsi'][i] > 0.8 and df['stochrsi_k'][i] > df['stochrsi_d'][i] and position != 1:
            signals.append(1)  # Go long
            position = 1
        elif df['stochrsi'][i] < 0.2 and df['stochrsi_k'][i] < df['stochrsi_d'][i] and position != -1:
            signals.append(-1)  # Go short
            position = -1
        else:
            signals.append(0)  # No action
    return signals

# Implement the strategy
data['signal'] = implement_strategy(data)

# Output signals
print(data[['timestamp', 'close', 'stochrsi', 'stochrsi_k', 'stochrsi_d', 'signal']])
