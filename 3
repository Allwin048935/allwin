# trading_bot.py
from binance.client import Client
import numpy as np
from ta.momentum import RSIIndicator
from ta.trend import SMAIndicator
import time
from config1 import API_KEY, API_SECRET, SYMBOLS, QUANTITY, STOCH_LENGTH, D_LENGTH, OVERSOLD_THRESHOLD, OVERBOUGHT_THRESHOLD

# Initialize Binance Futures client
client = Client(API_KEY, API_SECRET, tld='futures')

# Function to calculate StochRSI
def calculate_stoch_rsi(symbol):
    historical_data = client.get_historical_klines(symbol, Client.KLINE_INTERVAL_1HOUR, "1 day ago UTC")
    closes = np.array([float(entry[4]) for entry in historical_data])
    rsi = RSIIndicator(close=closes, window=STOCH_LENGTH)
    stoch_rsi = (rsi.rsi() - rsi.rsi().rolling(STOCH_LENGTH).min()) / \
                (rsi.rsi().rolling(STOCH_LENGTH).max() - rsi.rsi().rolling(STOCH_LENGTH).min())
    return stoch_rsi

# Function to calculate StochRSI %D
def calculate_stoch_rsi_d(stoch_rsi):
    stoch_rsi_d = SMAIndicator(close=stoch_rsi, window=D_LENGTH)
    return stoch_rsi_d.sma_indicator()

# Main trading loop
while True:
    for symbol in SYMBOLS:
        stoch_rsi = calculate_stoch_rsi(symbol)
        stoch_rsi_d = calculate_stoch_rsi_d(stoch_rsi)
        current_price = float(client.get_symbol_ticker(symbol=symbol)['price'])

        # Print StochRSI and StochRSI %D values
        print(f"Symbol: {symbol}, StochRSI: {stoch_rsi[-1]}, StochRSI %D: {stoch_rsi_d[-1]}")

        if stoch_rsi[-2] < stoch_rsi_d[-2]:
            # Buy signal
            print(f"Buy signal detected for {symbol}. Placing buy order...")
            order = client.futures_create_order(
                symbol=symbol,
                side=Client.SIDE_BUY,
                type=Client.ORDER_TYPE_MARKET,
                amount=QUANTITY
            )
            print(f"Buy order placed for {symbol}:", order)

        elif stoch_rsi[-2] > stoch_rsi_d[-2]:
            # Sell signal
            print(f"Sell signal detected for {symbol}. Placing sell order...")
            order = client.futures_create_order(
                symbol=symbol,
                side=Client.SIDE_SELL,
                type=Client.ORDER_TYPE_MARKET,
                amount=QUANTITY
            )
            print(f"Sell order placed for {symbol}:", order)

    # Add some sleep time to avoid hitting rate limits
    time.sleep(60)  # Sleep for 1 minute
