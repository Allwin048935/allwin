import ccxt
import pandas as pd
import time
from binance.client import Client
from ta.momentum import StochRSIIndicator
from datetime import datetime
from config import BINANCE_API_KEY, BINANCE_API_SECRET, symbols

# Create a Binance Futures client
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future',  # Set the default type to futures
    }
})

# Define EMA strategy parameters
short_ema_period = 5
medium_ema_period = 20  # Define the period for the medium EMA
long_ema_period = 50

# Track the last order type placed for each symbol
last_order_types = {symbol: None for symbol in symbols}
open_positions = {symbol: None for symbol in symbols}

# Fixed quantity in USDT worth of contracts
fixed_quantity_usdt = 15

# Function to fetch historical data for futures with EMA calculation
def fetch_ohlcv(symbol, timeframe, limit):
    try:
        # Fetch historical data
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        if ohlcv is None or len(ohlcv) == 0:
            raise ValueError("No data fetched")

        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

        # Check if DataFrame is empty
        if df.empty:
            raise ValueError("Empty DataFrame")

        # Calculate short, medium, and long EMAs
        df['short_ema'] = calculate_ema(df, short_ema_period)
        df['medium_ema'] = calculate_ema(df, medium_ema_period)  # Calculate medium EMA
        df['long_ema'] = calculate_ema(df, long_ema_period)

        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"Error fetching OHLCV data for {symbol}: {e}")
        return None  # Return None in case of an error


# Initialize Binance client
client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

# Function to calculate Stochastic RSI
def calculate_stochrsi(symbol, interval, limit):
    try:
        # Fetch historical data
        klines = client.get_historical_klines(symbol, interval, limit + 1)  # Fetch one extra candle for calculations

        # Extracting closing prices
        closing_prices = [float(kline[4]) for kline in klines]

        # Create a DataFrame
        data = pd.DataFrame({'close': closing_prices})

        # Calculate Stochastic RSI
        indicator = StochRSIIndicator(close=data['close'], window=14, smooth1=3, smooth2=3)
        data['stochrsi'] = indicator.stochrsi()
        data['stochrsi_k'] = indicator.stochrsi_k()
        data['stochrsi_d'] = indicator.stochrsi_d()

        # Remove the first row (extra candle)
        data = data.iloc[1:]

        # Return the DataFrame
        return data
    except Exception as e:
        print(f"Error calculating StochRSI for {symbol}: {e}")
        return None  # Return None in case of an error


# Main trading function for futures
def ema_strategy(interval):
    while True:
        try:
            for symbol in symbols:
                # Fetch historical data for each symbol
                data = fetch_ohlcv(symbol, interval, 100)  # Call fetch_ohlcv function

                # Check if there's enough data for EMA calculation
                if len(data) < long_ema_period:
                    print(f"Not enough data for {symbol}. Waiting for more data...")
                    continue

                # Calculate Stochastic RSI
                stoch_rsi_data = calculate_stochrsi(symbol, interval, 100)

                if stoch_rsi_data is None:
                    continue  # Skip this symbol if Stochastic RSI calculation failed

                # Fetch the latest candlestick for each symbol
                latest_candle = exchange.fetch_ticker(symbol)

                if 'close' not in latest_candle:
                    print(f"Error: 'close' not found in the latest_candle for {symbol}")
                    continue

                latest_close = latest_candle.get('close')

                # Check if latest_close is None or not a valid number
                if latest_close is None or not isinstance(latest_close, (int, float)):
                    print(f"Error: Invalid value for latest_close for {symbol}")
                    continue

                # Calculate the quantity based on the fixed USDT value
                quantity = fixed_quantity_usdt / float(latest_close)

                # Make trading decisions for each symbol
                if (
                    last_order_types[symbol] != 'LONG' and
                    stoch_rsi_data['stochrsi_k'].iloc[-2] >= stoch_rsi_data['stochrsi_d'].iloc[-2] and
                    stoch_rsi_data['stochrsi_k'].iloc[-3] <= stoch_rsi_data['stochrsi_d'].iloc[-3] and
                    stoch_rsi_data['stochrsi_k'].iloc[-2] <= 0.5 and
                    data['short_ema'].iloc[-2] >= data['short_ema'].iloc[-3]  # corrected variable name
                ):
                    print(f'{symbol} Long Entry Signal')
                    # Close existing short position if any
                    if open_positions[symbol] == 'SHORT':
                        close_short_position(symbol, quantity)
                    # Place a market buy order to enter long position
                    place_market_buy_order(symbol, quantity)
                    open_positions[symbol] = 'LONG'
                    last_order_types[symbol] = 'LONG'

                elif (
                    last_order_types[symbol] == 'LONG' and
                    stoch_rsi_data['stochrsi_k'].iloc[-3] >= stoch_rsi_data['stochrsi_d'].iloc[-3] and
                    stoch_rsi_data['stochrsi_k'].iloc[-2] <= stoch_rsi_data['stochrsi_d'].iloc[-2]
                ):
                    print(f'{symbol} Long Exit Signal')
                    # Close existing long position if short EMA crosses below long EMA
                    close_long_position(symbol, quantity)

                elif (
                    last_order_types[symbol] != 'SHORT' and
                    stoch_rsi_data['stochrsi_k'].iloc[-2] <= stoch_rsi_data['stochrsi_d'].iloc[-2] and
                    stoch_rsi_data['stochrsi_k'].iloc[-3] >= stoch_rsi_data['stochrsi_d'].iloc[-3] and
                    stoch_rsi_data['stochrsi_k'].iloc[-2] >= 0.5 and
                    data['short_ema'].iloc[-2] <= data['short_ema'].iloc[-3]  # corrected variable name
                ):
                    print(f'{symbol} Short Entry Signal')
                    # Close existing long position if any
                    if open_positions[symbol] == 'LONG':
                        close_long_position(symbol, quantity)
                    # Place a market sell order to enter short position
                    place_market_sell_order(symbol, quantity)
                    open_positions[symbol] = 'SHORT'
                    last_order_types[symbol] = 'SHORT'

                elif (
                    last_order_types[symbol] == 'SHORT' and
                    stoch_rsi_data['stochrsi_k'].iloc[-3] <= stoch_rsi_data['stochrsi_d'].iloc[-3] and
                    stoch_rsi_data['stochrsi_k'].iloc[-2] >= stoch_rsi_data['stochrsi_d'].iloc[-2]
                ):
                    print(f'{symbol} Short Exit Signal')
                    # Close existing short position if short EMA crosses above long EMA
                    close_short_position(symbol, quantity)

            # Sleep for some time (e.g., 5 minutes) before checking again
            time.sleep(60)

        except Exception as e:
            print(f'An error occurred: {e}')
            time.sleep(60)  # Wait for a minute before trying again

# Run the trading strategy
ema_strategy(Client.KLINE_INTERVAL_1HOUR)
