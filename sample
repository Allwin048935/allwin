import ccxt
import pandas as pd
import time
import requests
from config import BINANCE_API_KEY, BINANCE_API_SECRET, symbols, time_interval

# Create a Binance Futures client
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future',  # Set the default type to futures
    }
})

# Define EMA strategy parameters
short_ema_period = 1
long_ema_period = 50

# Track the last order type placed for each symbol
last_order_types = {symbol: None for symbol in symbols}
open_orders = {symbol: None for symbol in symbols}

# Fixed quantity in USDT worth of contracts
fixed_quantity_usdt = 15

# Define webhook URL
webhook_url = "https://nextlevelbot.com/telegram/webhook/NWxZVmdwSkxSeVZhZ0lReklCNGE1aVpnMlFiYkw5TUV5TkRBSHo4aFdPTGFEcVRiSnVNekdkSm5ESUJ3M0JMZWlTc3JyN3EzTlFSemU2eE1yTTc2Q1RxVDZmYUEwVHc1aVV3UEN1d1dmMmZINEFid0F5d1pvU2tpdnVCaFlpdm8="

# Function to fetch historical data for futures with EMA calculation
def fetch_ohlcv(symbol, timeframe, limit):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate EMA
def calculate_ema(df, period, column='close'):
    return df[column].ewm(span=period, adjust=False).mean()

# Function to place a market buy order
def place_market_buy_order(symbol, quantity):
    try:
        order = exchange.create_market_buy_order(
            symbol=symbol,
            amount=quantity
        )
        print(f"Market Buy Order placed for {symbol}: {order}")
        return order
    except Exception as e:
        print(f"Error placing Market Buy Order for {symbol}: {e}")

# Function to place a market sell order
def place_market_sell_order(symbol, quantity):
    try:
        order = exchange.create_market_sell_order(
            symbol=symbol,
            amount=quantity
        )
        print(f"Market Sell Order placed for {symbol}: {order}")
        return order
    except Exception as e:
        print(f"Error placing Market Sell Order for {symbol}: {e}")

# Function to send webhook signal
def send_webhook_signal(message):
    try:
        response = requests.post(webhook_url, json=message)
        if response.status_code == 200:
            print("Webhook signal sent successfully.")
        else:
            print(f"Failed to send webhook signal: {response.text}")
    except Exception as e:
        print(f"Error sending webhook signal: {e}")

# Function to calculate one day percentage change for a symbol
def calculate_one_day_change(symbol):
    try:
        # Fetch daily OHLCV data for the symbol
        daily_data = fetch_ohlcv(symbol, '1d', 3)
        if len(daily_data) >= 3:
            # Calculate one day percentage change
            change = ((daily_data.iloc[-2]['close'] - daily_data.iloc[-3]['close']) / daily_data.iloc[-3]['close']) * 100
            return change
    except Exception as e:
        print(f"Error calculating one day change for {symbol}: {e}")
    return None

def ema_strategy():
    while True:
        try:
            cumulated_change = 0  # Initialize cumulated change
            for symbol in symbols:
                # Calculate one day percentage change for each symbol
                one_day_change = calculate_one_day_change(symbol)
                if one_day_change is not None:
                    cumulated_change += one_day_change

            # Send webhook signal with the cumulated percentage change
            send_webhook_signal({"cumulated_change": cumulated_change})

            # Sleep for some time (e.g., 5 minutes) before checking again
            time.sleep(60)

        except Exception as e:
            print(f'An error occurred: {e}')
            time.sleep(60)  # Wait for a minute before trying again

# Run the trading strategy
ema_strategy()