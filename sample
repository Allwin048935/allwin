import ccxt
import pandas as pd
import time
from config import BINANCE_API_KEY, BINANCE_API_SECRET, symbols, time_interval

# Create a Binance Futures client
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future',  # Set the default type to futures
    }
})

# Define EMA strategy parameters
short_ema_period = 1
long_ema_period = 50

# Function to fetch historical data for futures with EMA calculation
def fetch_ohlcv(symbol, timeframe, limit):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate EMA
def calculate_ema(df, period, column='close'):
    return df[column].ewm(span=period, adjust=False).mean()

# Function to calculate one day percentage change for a symbol
def calculate_one_day_change(symbol):
    try:
        # Fetch daily OHLCV data for the symbol
        daily_data = fetch_ohlcv(symbol, '1d', 3)
        if len(daily_data) >= 2:
            # Calculate one day percentage change
            change = ((daily_data.iloc[-1]['close'] - daily_data.iloc[-2]['close']) / daily_data.iloc[-2]['close']) * 100
            return change
    except Exception as e:
        print(f"Error calculating one day change for {symbol}: {e}")
    return None

def ema_strategy():
    while True:
        try:
            cumulated_change = 0  # Initialize cumulated change
            symbol_changes = {}  # Initialize dictionary to store individual symbol changes
            for symbol in symbols:
                # Calculate one day percentage change for each symbol
                one_day_change = calculate_one_day_change(symbol)
                if one_day_change is not None:
                    cumulated_change += one_day_change
                    symbol_changes[symbol] = one_day_change

            # Print the cumulated percentage change and individual symbol changes
            print("Cumulated Change:", cumulated_change)
            print("Symbol Changes:")
            for symbol, change in symbol_changes.items():
                print(symbol, ":", change)

            # Sleep for some time (e.g., 5 minutes) before checking again
            time.sleep(60)

        except Exception as e:
            print(f'An error occurred: {e}')
            time.sleep(60)  # Wait for a minute before trying again

# Run the trading strategy
ema_strategy()
