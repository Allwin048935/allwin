from binance.client import Client
from binance.enums import *
import pandas as pd
import ta
import matplotlib.pyplot as plt
import io
from scipy.signal import find_peaks
from datetime import datetime
from pytz import timezone
from PIL import Image
from telegram import Bot

# Binance API credentials
api_key = 'your_api_key'
api_secret = 'your_api_secret'

# Telegram Bot token and chat ID
bot_token = 'your_bot_token'
chat_id = 'your_chat_id'

client = Client(api_key, api_secret)

def get_historical_data(symbol, interval, limit):
    """Fetches historical price data from Binance"""
    klines = client.get_historical_klines(symbol, interval, f"{limit} day ago UTC")
    data = pd.DataFrame(klines, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time', 'quote_asset_volume', 'number_of_trades', 'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'])
    data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
    data.set_index('timestamp', inplace=True)
    return data

def find_peaks_and_valleys(data):
    """Finds peaks and valleys for trendline detection"""
    close_values = data['close'].to_numpy()
    peaks, _ = find_peaks(close_values)
    valleys, _ = find_peaks(-close_values)
    return peaks, valleys

def detect_trendlines(data, peaks, valleys):
    """Detects trendlines using peaks and valleys"""
    trendlines = []
    
    # Find trendlines connecting peaks and valleys
    for peak in peaks:
        for valley in valleys:
            if valley < peak:
                trendlines.append((valley, peak))
                break
    
    return trendlines

def plot_breakout_chart(symbol, data, trendlines):
    """Plot breakout chart with detected trendlines and return image object"""
    plt.figure(figsize=(12, 6))
    plt.plot(data.index, data['close'], label='Close Price', color='blue')
    
    # Plot trendlines
    for line in trendlines:
        plt.plot(data.index[[line[0], line[1]]], data['close'][[line[0], line[1]]], linestyle='--', color='orange')
    
    plt.title(f"Trendline Breakout Strategy - {symbol}")
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.grid(True)
    
    # Save image to a BytesIO object
    img_bytes = io.BytesIO()
    plt.savefig(img_bytes, format='png')
    img_bytes.seek(0)
    
    # Close plot to release memory
    plt.close()
    
    return img_bytes

def breakout_strategy(symbol, interval='1h', limit=10):
    """Trendline breakout strategy"""
    data = get_historical_data(symbol, interval, limit)
    
    # Find peaks and valleys
    peaks, valleys = find_peaks_and_valleys(data)
    
    # Detect trendlines
    trendlines = detect_trendlines(data, peaks, valleys)
    
    # Check for breakout conditions
    if len(trendlines) > 0:
        return True, data, trendlines
    else:
        return False, data, []

def send_image_to_telegram(image_bytes):
    """Send image to Telegram"""
    bot = Bot(token=bot_token)
    timestamp = datetime.now(timezone('UTC')).strftime('%Y-%m-%d %H:%M:%S %Z')
    caption = f"Trendline Breakout detected at {timestamp}"
    bot.send_photo(chat_id=chat_id, photo=image_bytes, caption=caption)

# Example usage:
if __name__ == '__main__':
    symbol = 'BTCUSDT'
    breakout_detected, data, trendlines = breakout_strategy(symbol)
    
    if breakout_detected:
        image_bytes = plot_breakout_chart(symbol, data, trendlines)
        send_image_to_telegram(image_bytes)
    else:
        print(f"No trendline breakout detected for {symbol} on {interval} chart.")