import ccxt
import pandas as pd
import time
import requests
from config import BINANCE_API_KEY, BINANCE_API_SECRET, symbols, time_interval

# Create a Binance Futures client
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future',  # Set the default type to futures
    }
})

# Define EMA strategy parameters
short_ema_period = 1
long_ema_period = 50

# Track the last order type placed for each symbol
last_order_types = {symbol: None for symbol in symbols}
open_orders = {symbol: None for symbol in symbols}

# Fixed quantity in USDT worth of contracts
fixed_quantity_usdt = 15

# Define webhook URL
webhook_url = "https://nextlevelbot.com/telegram/webhook/NWxZVmdwSkxSeVZhZ0lReklCNGE1aVpnMlFiYkw5TUV5TkRBSHo4aFdPTGFEcVRiSnVNekdkSm5ESUJ3M0JMZWlTc3JyN3EzTlFSemU2eE1yTTc2Q1RxVDZmYUEwVHc1aVV3UEN1d1dmMmZINEFid0F5d1pvU2tpdnVCaFlpdm8="

# Function to fetch historical data for futures with EMA calculation
def fetch_ohlcv(symbol, timeframe, limit):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

    # Calculate short and long EMAs
    df['short_ema'] = calculate_ema(df, short_ema_period)
    df['long_ema'] = calculate_ema(df, long_ema_period)

    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate EMA
def calculate_ema(df, period, column='close'):
    return df[column].ewm(span=period, adjust=False).mean()

# Function to place a market buy order
def place_market_buy_order(symbol, quantity):
    try:
        order = exchange.create_market_buy_order(
            symbol=symbol,
            amount=quantity
        )
        print(f"Market Buy Order placed for {symbol}: {order}")
        return order
    except Exception as e:
        print(f"Error placing Market Buy Order for {symbol}: {e}")

# Function to place a market sell order
def place_market_sell_order(symbol, quantity):
    try:
        order = exchange.create_market_sell_order(
            symbol=symbol,
            amount=quantity
        )
        print(f"Market Sell Order placed for {symbol}: {order}")
        return order
    except Exception as e:
        print(f"Error placing Market Sell Order for {symbol}: {e}")

# Function to send webhook signal
def send_webhook_signal(message):
    try:
        response = requests.post(webhook_url, json=message)
        if response.status_code == 200:
            print("Webhook signal sent successfully.")
        else:
            print(f"Failed to send webhook signal: {response.text}")
    except Exception as e:
        print(f"Error sending webhook signal: {e}")

def ema_strategy():
    while True:
        try:
            for symbol in symbols:
                # Fetch historical data for each symbol with a 15-minute time interval
                historical_data = fetch_ohlcv(symbol, '15m', 200)

                # Check if there's enough data for EMA calculation
                if len(historical_data) < long_ema_period:
                    print(f"Not enough data for {symbol}. Waiting for more data...")
                    continue

                # Fetch the latest candlestick for each symbol
                latest_candle = exchange.fetch_ohlcv(symbol, '1d', limit=1)
                latest_open = latest_candle[0][1]  # Open price of the latest candle

                # Calculate the quantity based on the fixed USDT value
                quantity = fixed_quantity_usdt / float(latest_open)

                # Calculate short EMA over a 15-minute interval
                short_ema_15min = calculate_ema(historical_data, short_ema_period, column='close')

                # Make trading decisions for each symbol
                if (
                    short_ema_15min.iloc[-2] >= latest_open and
                    short_ema_15min.iloc[-3] <= latest_open and
                    last_order_types[symbol] != 'BUY'
                ):
                    open_orders[symbol] = place_market_buy_order(symbol, quantity)
                    last_order_types[symbol] = 'BUY'
                    print(f'{symbol} Buy Signal (Short EMA cross over Open)')
                    send_webhook_signal(f"{  "message_type": "bot",  "bot_id": 13005973,  "email_token": "045951c0-66bd-47dd-a9cc-4ef2a2fee069",  "delay_seconds": 0,  "pair": "{symbol}"}")

                elif (
                    short_ema_15min.iloc[-2] <= latest_open and
                    short_ema_15min.iloc[-3] >= latest_open and
                    last_order_types[symbol] != 'SELL'
                ):
                    open_orders[symbol] = place_market_sell_order(symbol, quantity)
                    last_order_types[symbol] = 'SELL'
                    print(f'{symbol} Sell Signal (Short EMA cross under Open)')
                    send_webhook_signal(f"{  "action": "close_at_market_price",  "message_type": "bot",  "bot_id": 13005973,  "email_token": "045951c0-66bd-47dd-a9cc-4ef2a2fee069",  "delay_seconds": 0,  "pair": "{symbol}"}")

            # Sleep for some time (e.g., 5 minutes) before checking again
            time.sleep(60)

        except Exception as e:
            print(f'An error occurred: {e}')
            time.sleep(60)  # Wait for a minute before trying again

# Run the trading strategy
ema_strategy()   
